Git이란??

형상관리도구중 하나이다
형상관리도구는 다른말로 버전 관리 시스템 이라고도 한다
Git은 프로젝트 소스코드를 효과적으로 관리할 수 있는 시스템이다

효과적 관리란?

여러명이 동시에 작업하더라도 문제 없도록 한다
소프트웨어의 여러 버전을 동시에 관리 할 수 있다
프로젝트 진행의 모든 로그를 볼 수 있으며 해당 시점으로 되돌리는 것도 가능하다

Git을 사용하는 이유
프로젝트 시 어떤 기능을 빼고 더하고 고치고 수정하는 과정은 필수!
기능을 되돌리게 될 수도 있고, 서로 다른 기능의 버전을 유지해야 하는 경우도 있다

코드관리 측면
변경된 이력 확인
이전 이력으로 되돌리기
다른 기능의 버전 코드 유지
현재 최종이 어느 시점인지 표현할 수 있음

협업의 측면
각 기능별로 분업 후 하나의 코드로 합칠 수 있음
같은 부분을 수정해 문제가 생기는 경우 안내
협업으로 인한 실수 예방
팀원 간의 커뮤니케이션 지원

SourceTree 설치
SourceTree란?
Git을 더 수비게 활용하게 하기 위한 GUI 툴

Git 사용자 설정
로컬에서 사용할 Git 사용자 이메일과 이름을 설정
git config : Git에 관한 설정을 추가/변경/삭제하는 명령어
설정파일 - System설정파일/Global 설정파일 / 로컬 설정 파일
System 설정 파일 : 모든 시스템 사용자에게 적용 (git config --system)
Global 설정 파일 : 한 사용자의 전치 Git Repository에 적용 (git config --global)
Local 설정 파일 : 하나의 Repository에만 적용 (git config --local)

Global Git 사용자 설정
git config --global user.email "abc@abc.com"
git config --global user.anme "hong Gil-dong"

설정 확인
git config --list

Github 계정에 ssh key 등록하기
ssh key 만들기
https://bit.ly/368zxvR

깃 초기화 및 삭제
Git 초기화
명령어:git init
초기화 할 대상 폴더에서 명령어 입력
Git 초기화 시 폴더 안에 숨김 폴더로 .git폴더 생성 (Local Config 등으로 구성)

단순히 .git폴더를 삭제
rm -rf .git 하면됨

.gitignore란?
사용자가 git에 등록(커밋)되지 않길 원하는 파일 또는 폴더들의 목록을 저장
.gitignore에 등록된 파일(폴더) 들은 커밋 시 자동으로 제외됨
작성법
- #은 주석의 역할
- 폴더 : /폴더명 (예: /docs)
- 파일 : 파일명.확장자 (예: test.txt)
- 폴더 안 파일 : /폴더명/파일명.확장자 (예: /docs/test.txt)
- 폴더 안 특정 확장자 파일 전부 (예: /docs/*.text)
- 폴더 하위 모든 특정 확장자 파일 전부 (예: /docs/**/*.txt)

.gitignore작성에 유용한 사이트
https://gitignore.io

기본 동작 원리
Working Directory: 작업하는 파일이 있는 디렉토리
Staging Area: Git에 등록할 (커밋) 파일들이 올라가는 영역
Local Repository: 로컬 Git 프로젝트의 메타데이터와 데이터 정보가 저장되는 영역
Remote Repository: Github 등의 서비스를 통한 온라인 상의 저장소

기본용어
origin: 원격(Github 등의 온라인 저장소)에 있는 코드
head: 내가 지금 작업하고 있는 로컬 브랜치
add: Working Directory에서 Staging Area로 등록하다
commit: Staging Area에 등록된 파일을 Local Storage로 등록
Commit Message: commit 시 함께 작성 하는 메세지(메모)
push: Local Storage에서 변경된 파일들을 Remote Repository로 등록
fetch: Remote Repository의 변경된 파일들을 Local Repository로 전달
mergge: Local Repository의 변경사항을 Working Directory로 전달
Branch: 독립적으로 어떤 작업을 따로 진행하기위한 가지
checkout: 사용할 다른 브랜치를 지정

Local Repository
저장소(Repository)?
파일이나 폴더를 저장하는 곳
Git 저장소는 파일 변경 이력 별로 구분되어 저장
Snapshot = 파일이나 폴더를 사진을 찍듯 순간의 상태를 저장한다
내 PC에 파일이 저장되는 개인 전용 저장 공간
Local Repository 생성
1. 원하는 폴더 생성
2. 해당 폴더에서 git init명령어 입력
3. .git 폴더 생성 확인

원격 저장소 (Remote Repository)에서 복사해 Local Repository를 생성할수도 있다

Remote Repository
파일이 전용서버(Github)에서 관리되며 여러 사람이 함께 공유
Remote Repository생성: Github를 통해 생성한다

Clone
여러분이 입사 후 첫 출근해서 처음 프로젝트에 투입되었다
선배: 프로젝트 레파지토리 클론 받아서 작업 시작해줘!
나: ??

로컬에서 작업하기 위해 Remote Repository를 복제를 해서 내 PC에 Local Repository에 저장하는것

소스트리를 이용해 Clone
1. Github 원격 저장소에서 SSH 주소복사
2. URL에서 복제 선택
3. 복사한 SSH 주소 입력, 복사할 폴더 설정, 이름 설정

Add, Commit, Push, Pull
Add란?
변경된 파일 중 Repository에 올릴 파일들을 등록한다.

Commit 이란?
Add로 등록된 파일들을 한 덩어리로 만들고 메시지 추가해 로컬저장소에 올린다

Push란?
Commit되어 로컬 저장소에서 변경이 된 파일들을 원격 저장소로 전달한다
Push완료후 없던 origin이 생긴다. Origin : 원격 저장소를 의미
Push를 하면 Github에 들어간다
히스토리와 Checkout
Push해 로컬 저장소의 변경사항을 원격 저장소에 반영하면 같은 라인에 표시된다
예) main origin/main -> 이렇게 같은라인
예) main 1개앞 -> 1개앞 해당표시는 소스의 현재 시점을 나타낸다. 로컬 저장소의 경우는 main, 원격 저장소의 경우는 origin/main
     origin/main -> commit 후 로컬 저장소에 변경사항이 있지만 아직 원격 저장소로 push하지 않은 상태
히스토리의 원하는 시점에서 오른쪽 클릭후 Checkout하면 Head가 이동되고 작업 소스가 Head시점의 상태로 변경된다.

Pull이란?
원격저장소의 변경사항을 로컬 저장소로 가져옴과 동시에 내 작업 소스에 합친다
Pull = Fetch + Merge
Fetch와 Merge
Fetch : 원격 저장소의 소스를 로컬 저장소로 받아와 일치 시킨다. (내 작업 소스에는 반영X)
Merge : Fetch해 온 로컬 저장소의 소스를 내 작업 소스에 합친다. (합칠 때 같은 부분의 소스가 다를 경우 충돌 발생!)
Pull을 하는 상황은 언제 발생할까?
원격 저장소는 여러 프로젝트 개발 이누언들이 동시에 사용한다
다른 개발자가 변경상태를 Push해 원격 저장소에 반영한다면 내 입장에서는 원격 저장소에 변경사항이 발생한것!
다른 개발자가 Push해 원격 저장소가 변경되어 Pull 할 거리가 생기면 상단 풀 아이콘에 숫자가 생긴다!
히스토리에서도 origin과 로컬 저장소의 현재 시점이 다르게 표시!
Chectout은 시점이동이다 

Branch
나무가지를 의미한다
기존에 만들어 놓은 버전(Main)에서 복사해 새로운 가지를 만들어 다른 방향으로 작업을 이어 나가는것
Branch생성
브랜치 이름 작성 후 생성
새 브런치 체크아웃
브랜치를 생성한 뒤 현재 작업소스를 해당 브랜치의 상태로 변경
이것을 체크를 하지않고 생성을 하면 기존에 체크아웃되어있던 브랜치를 Head를 유지하고 있는 상태
여기서 바로 commit을 하면 새로운 브랜치에 하는게 아니라 기존에 체크아웃되어있던 브랜치에 체크아웃을 하게 된다.
Branch생성 후 커밋 -> 푸시
파란색 네모로 되어있는게 브랜치

브랜치 생성 직후
예)feature1 origin/main main 나는 다른 개발자!
-가지는 생겼지만 소스의 상태가 같기 때문에 한줄에 표시됨
-변경사항이 없어 브랜치는 로컬 저장소에만 반영되어 있는 상태

main 브랜치 커밋 & 푸시
예)main origin/main
    feature1
-feature1 브랜치는 가만히 있고 Main브랜치만 뻗어 나감
-main 브랜치는 원격 저장소에 까지 반영됨

feature1 브랜치 커밋 & 푸시
예)feature1 origin/feature1
    origin/main main
-feature1 브랜치와 main 브랜치가 서로 다른 방향으로 뻗어 나감
-원격 저장소에 feature1 브랜치 생성됨

Merge(병합)
각각의 브랜치에서 작업이 완료된 후 통합 브랜치(Main)로 모아 합치는 작업
Merge 후 결과 Branch로 체크아웃 후 Merge 대상 브랜치에서 Merge!
Merge할 커밋 시점을 선택해 Merge하는 것도 가능!

Conflict해결
Conflict발생!
-Branch를 Merge 할 때 발생할 수 있다
-같은 파일 같은 부분을 수정한 브랜치들을 Merge할 때 발생
충돌이 나면 커밋부분에서 느낌표로 나온다
느낌표가나오는 곳에서 오른쪽클릭해서 충돌 해결하를 눌러서 해결된것으로 표시하면 된다
(다른 작업자가 작업한 브랜치를 머지할 땐 해당 작업자와 충분한 논의 필요!)
충돌이 나면 항상 선택을 해야한다 그 선택에 대해서 각각의 작업자와 결정을 해서 다시 커밋하고 푸시해서 Merge할 수 있다

Fork 복제
Fork란?
다른사람의 원격 저장소에서 어떤부분을 수정하거나 추가 기능을 넣고 싶을 때 해당 원격 저장소를
내 원격 저장소에 그대로 복제하는것, 전문용어로 "포크뜬다"라고 한다!(자주 하진않음)

-다른 계정으로 접속
-원하는 Repository에 Github 페이지 접속 후 Fork 버튼 클릭

Pull Request란?
다른 살마에게 내 블내치를 Merge 해 달라고 하는 요청
사례1 : 한 원격 저장소에서 내 브랜치를 Merge하기전 피드백을 요청!
사례2 : Fork 뜬 저장소에서 원본 저장소에 개발 완료 후 원본 저장소에 Merge를 요청!
어떤 부분을 어떻게 수정했는지, 피드백 요청하는 부분은 정확히 어떤 파일의 어느 부분인지 기입한다.
Fork 복제한 저장소에서 푸시하게 되면 Github페이지에 Compare&pull requeset버튼 생김, 또는 세번째 Pull Request탭 클릭해 생성
Pull request 한 저장소 & 브랜치 / Merge 대상 저장소 & 브랜치를 선택할 수 있다

터미널에서 사용하기
git clone [원격 저장소 주소]
예) git clone git@github.com:water312/CloneTest.git
클론이 생성된다
git status
저장소의 상태를 보여준다
add를 통해서 staging area에 변경된 소스들을 등록하는데 이런 부분들을 보여준다
git add [파일경로]
예) git add index.html
git add -i = 추가되지 않은 파일들 모두 한번에 Staging Area에 추가
git rm --cached [파일경로]
Staging Area에 add된 파일을 다시 Working Directory로 내린다
git rm -r --cahced = Staging Area의 모든 파일을 Working Directory로 내린다.
git commit -m"커밋 메시지"
git push
커밋된것들을 Remote Repository로 업로드시켜주는것
git log --decorate --graph
터미널에서도 로그들을 출력해서 보여준다

ISSUES
이슈는 프로젝트의 작업, 개선사항, 버글르 추적하고 커뮤니케이션 할 수 있는 Github에서 제공하는 기능

Markdown이란?
일반 텍스트 형식의 문서의 양식을 편집하는 문법
누구나 쉽게 읽고 쓸 수 있으며 HTML로 변환이 가능하다
특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용해 빠르게 작성하고 쉽게 읽을 수 있다
Markdown태그의 종휴
-제목 #, =====
-인용 >
-강조 *, _
-링크 [텍스트](주소 "설명 생략가능")
-이미지 ![텍스트](이미지주소 "설명 생략가능")
-리스트 1, *, -, +
-코드표시 <code>코드</code>, 한줄 띄우고 스페이스 4칸, ''''코드''''
-줄바꿈 엔터 2번, 강제 줄바꿈은 문장끝에 스페이스바 2칸
-가로선 -----, *****, +++++
참고문서 http://www.markdownguide.org/
Markdown 에디터
Typora
https://typora.io/
유료 마크다운 리더 & 에디터








